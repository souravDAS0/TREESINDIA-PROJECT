basePath: /api/v1
definitions:
  controllers.KYCRequest:
    properties:
      aadhaar_back:
        type: string
      aadhaar_front:
        type: string
      aadhaar_number:
        type: string
      address_proof:
        type: string
      address_type:
        type: string
      agency_certificate:
        type: string
      broker_license_doc:
        type: string
      experience_proof:
        type: string
      pan_card:
        type: string
      pan_number:
        type: string
      skill_certificates:
        items:
          type: string
        type: array
    required:
    - aadhaar_back
    - aadhaar_front
    - aadhaar_number
    - address_proof
    - address_type
    - pan_card
    - pan_number
    type: object
  controllers.LoginRequest:
    properties:
      phone:
        maxLength: 13
        minLength: 13
        type: string
    required:
    - phone
    type: object
  controllers.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  controllers.RegisterRequest:
    properties:
      phone:
        maxLength: 13
        minLength: 13
        type: string
    required:
    - phone
    type: object
  controllers.SaveLocationRequest:
    properties:
      accuracy:
        type: number
      address:
        type: string
      city:
        type: string
      country:
        type: string
      latitude:
        maximum: 90
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
      postal_code:
        type: string
      source:
        enum:
        - gps
        - ip
        - manual
        type: string
      state:
        type: string
    required:
    - latitude
    - longitude
    - source
    type: object
  controllers.UpdateLocationRequest:
    properties:
      accuracy:
        type: number
      address:
        type: string
      city:
        type: string
      country:
        type: string
      latitude:
        maximum: 180
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
      postal_code:
        type: string
      source:
        enum:
        - gps
        - ip
        - manual
        type: string
      state:
        type: string
    required:
    - latitude
    - longitude
    - source
    type: object
  controllers.VerifyOTPRequest:
    properties:
      otp:
        type: string
      temp_token:
        type: string
    required:
    - otp
    - temp_token
    type: object
  models.Response:
    properties:
      data: {}
      error:
        example: Detailed error description
        type: string
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@treesindia.com
    name: TREESINDIA Support
    url: http://www.treesindia.com/support
  description: Unified digital platform for home services and real estate marketplace
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: TREESINDIA API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Get application information and available endpoints
      produces:
      - application/json
      responses:
        "200":
          description: Application information
          schema:
            $ref: '#/definitions/models.Response'
      summary: Application information
      tags:
      - Health
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Get admin dashboard statistics including user counts and pending
        items
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard stats retrieved
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get dashboard statistics
      tags:
      - Admin
  /admin/kyc/{id}/approve:
    put:
      consumes:
      - application/json
      description: Approve a KYC verification request
      parameters:
      - description: KYC ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: KYC approved successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: KYC request not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Approve KYC request
      tags:
      - Admin
  /admin/kyc/{id}/reject:
    put:
      consumes:
      - application/json
      description: Reject a KYC verification request with reason
      parameters:
      - description: KYC ID
        in: path
        name: id
        required: true
        type: integer
      - description: Rejection reason
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: KYC rejected successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: KYC request not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Reject KYC request
      tags:
      - Admin
  /admin/kyc/pending:
    get:
      consumes:
      - application/json
      description: Get all pending KYC verification requests
      produces:
      - application/json
      responses:
        "200":
          description: Pending KYC requests retrieved
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get pending KYC requests
      tags:
      - Admin
  /admin/seed:
    post:
      consumes:
      - application/json
      description: Create default admin users in the database
      produces:
      - application/json
      responses:
        "201":
          description: Admin users seeded successfully
          schema:
            $ref: '#/definitions/models.Response'
        "409":
          description: Admin users already exist
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Seed admin users
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination support
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Admin
  /admin/users/{id}/status:
    put:
      consumes:
      - application/json
      description: Update user's active status
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User status update
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: User status updated successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Update user status
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with phone number
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate tokens
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with phone number
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Register a new user
      tags:
      - Authentication
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP and generate JWT tokens
      parameters:
      - description: OTP verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid OTP or request data
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Verify OTP
      tags:
      - Authentication
  /health:
    get:
      consumes:
      - application/json
      description: Get server health status and system information
      produces:
      - application/json
      responses:
        "200":
          description: Server health information
          schema:
            $ref: '#/definitions/models.Response'
      summary: Health check
      tags:
      - Health
  /kyc/submit:
    post:
      consumes:
      - application/json
      description: Submit KYC verification documents for workers and brokers
      parameters:
      - description: KYC submission request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.KYCRequest'
      produces:
      - application/json
      responses:
        "201":
          description: KYC submitted successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data or KYC not required
          schema:
            $ref: '#/definitions/models.Response'
        "409":
          description: KYC already submitted
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Submit KYC documents
      tags:
      - KYC
  /users/location:
    get:
      consumes:
      - application/json
      description: Get user's current location
      produces:
      - application/json
      responses:
        "200":
          description: Location retrieved successfully
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get user location
      tags:
      - Location
    post:
      consumes:
      - application/json
      description: Save user's current location
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/controllers.SaveLocationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Location saved successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Save user location
      tags:
      - Location
    put:
      consumes:
      - application/json
      description: Update user's current location
      parameters:
      - description: Updated location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Location updated successfully
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Update user location
      tags:
      - Location
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
